name: Automated Vulnerability Fix

on:
  schedule:
    # Run weekly on Mondays at 7 AM UTC (1 hour after vulnerability scan)
    - cron: '0 7 * * 1'
  workflow_dispatch: # Allow manual triggering

env:
  CARGO_TERM_COLOR: always

jobs:
  auto-fix-vulnerabilities:
    name: Auto-fix Vulnerabilities
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Enable Rust caching
        uses: Swatinem/rust-cache@v2
        with:
          key: cargo-audit-fix-${{ runner.os }}
        
      - name: Cache cargo-audit binary
        uses: actions/cache@v4
        id: cache-cargo-audit
        with:
          path: ~/.cargo/bin/cargo-audit
          key: cargo-audit-${{ runner.os }}-v0.21.2-fix
          
      - name: Install cargo-audit with fix feature
        if: steps.cache-cargo-audit.outputs.cache-hit != 'true'
        run: |
          echo "Installing cargo-audit with fix feature..."
          cargo install cargo-audit --locked --features=fix --version=0.21.2
          echo "✅ cargo-audit installation completed"
        
      - name: Verify cargo-audit installation
        run: |
          echo "Verifying cargo-audit installation..."
          cargo audit --version
          echo "✅ cargo-audit verified and ready"
        
      - name: Phase 1 - Vulnerability Detection
        run: |
          echo "🔍 Phase 1: Vulnerability Detection"
          echo "=================================="
          
          # Run comprehensive vulnerability scan
          cargo audit --format json --output audit-results.json 2>/dev/null || true
          
          if [ -f audit-results.json ] && [ -s audit-results.json ]; then
            echo "✅ Vulnerability scan completed"
            
            # Parse and categorize vulnerabilities by severity
            if grep -q '"severity":' audit-results.json; then
              echo "has_vulnerabilities=true" >> $GITHUB_ENV
              
              # Count vulnerabilities by severity
              HIGH_COUNT=$(jq -r '.vulnerabilities[] | select(.advisory.severity == "high") | .advisory.id' audit-results.json 2>/dev/null | wc -l || echo "0")
              CRITICAL_COUNT=$(jq -r '.vulnerabilities[] | select(.advisory.severity == "critical") | .advisory.id' audit-results.json 2>/dev/null | wc -l || echo "0")
              MEDIUM_COUNT=$(jq -r '.vulnerabilities[] | select(.advisory.severity == "medium") | .advisory.id' audit-results.json 2>/dev/null | wc -l || echo "0")
              
              echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_ENV
              echo "high_count=$HIGH_COUNT" >> $GITHUB_ENV
              echo "medium_count=$MEDIUM_COUNT" >> $GITHUB_ENV
              
              echo "📊 Vulnerability Summary:"
              echo "- Critical: $CRITICAL_COUNT"
              echo "- High: $HIGH_COUNT"
              echo "- Medium: $MEDIUM_COUNT"
            else
              echo "has_vulnerabilities=false" >> $GITHUB_ENV
              echo "✅ No vulnerabilities found"
            fi
          else
            echo "has_vulnerabilities=false" >> $GITHUB_ENV
            echo "✅ No vulnerabilities found"
          fi
        continue-on-error: true
        
      - name: Phase 2 - Dry Run Analysis
        if: env.has_vulnerabilities == 'true'
        run: |
          echo "🔍 Phase 2: Dry Run Analysis"
          echo "============================"
          
          # Test fix availability with dry run
          echo "Testing automated fix availability..."
          if cargo audit fix --dry-run > fix-preview.txt 2>&1; then
            echo "✅ Automated fixes available"
            echo "fixes_available=true" >> $GITHUB_ENV
            echo "📋 Fix Preview:"
            cat fix-preview.txt
          else
            echo "⚠️  No automated fixes available"
            echo "fixes_available=false" >> $GITHUB_ENV
            echo "📋 Fix Analysis:"
            cat fix-preview.txt || echo "No fix preview available"
          fi
        continue-on-error: true
      
      - name: Phase 3 - Environment Setup
        if: env.has_vulnerabilities == 'true' && env.fixes_available == 'true'
        run: |
          echo "🔧 Phase 3: Environment Setup"
          echo "============================="
          
          # Create a new branch for fixes
          BRANCH_NAME="security/automated-fixes-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$BRANCH_NAME"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_ENV
          
          # Configure git
          git config user.name "Security Bot"
          git config user.email "security@dominic.computer"
          
          echo "✅ Created branch: $BRANCH_NAME"
      
      - name: Phase 4 - Fix Application
        if: env.has_vulnerabilities == 'true' && env.fixes_available == 'true'
        run: |
          echo "🔧 Phase 4: Fix Application"
          echo "=========================="
          
          # Apply automated fixes
          echo "Applying automated security fixes..."
          if cargo audit fix 2>&1 | tee fix-application.log; then
            echo "✅ Fixes applied successfully"
            echo "fixes_applied=true" >> $GITHUB_ENV
          else
            echo "❌ Fix application failed"
            echo "fixes_applied=false" >> $GITHUB_ENV
            echo "📋 Fix Application Log:"
            cat fix-application.log
            exit 1
          fi
        continue-on-error: true
      
      - name: Phase 5 - Validation Pipeline
        if: env.has_vulnerabilities == 'true' && env.fixes_applied == 'true'
        run: |
          echo "✅ Phase 5: Validation Pipeline"
          echo "==============================="
          
          # Check for any changes made
          if git diff --quiet; then
            echo "❌ No changes made by automated fixes"
            echo "validation_passed=false" >> $GITHUB_ENV
            exit 1
          fi
          
          echo "📋 Changes detected, validating..."
          
          # Validate compilation
          echo "🔍 Testing compilation..."
          if cargo check --all-targets --all-features 2>&1 | tee validation-compile.log; then
            echo "✅ Compilation successful"
            echo "compile_success=true" >> $GITHUB_ENV
          else
            echo "❌ Compilation failed"
            echo "compile_success=false" >> $GITHUB_ENV
            echo "📋 Compilation Log:"
            cat validation-compile.log
            exit 1
          fi
          
          # Re-run vulnerability scan to verify fixes
          echo "🔍 Verifying vulnerability fixes..."
          if cargo audit --format json --output audit-post-fix.json 2>/dev/null; then
            echo "✅ No vulnerabilities remain"
            echo "vulnerabilities_resolved=true" >> $GITHUB_ENV
          else
            echo "⚠️  Some vulnerabilities may remain"
            echo "vulnerabilities_resolved=partial" >> $GITHUB_ENV
          fi
          
          # Run basic tests if available
          echo "🔍 Running basic tests..."
          if cargo test --lib --bins 2>&1 | tee validation-test.log; then
            echo "✅ Basic tests passed"
            echo "tests_passed=true" >> $GITHUB_ENV
          else
            echo "⚠️  Some tests failed"
            echo "tests_passed=false" >> $GITHUB_ENV
            echo "📋 Test Log:"
            cat validation-test.log
          fi
          
          # Determine overall validation status based on critical requirements
          if [ "$compile_success" = "true" ] && [ "$vulnerabilities_resolved" != "false" ]; then
            if [ "$tests_passed" = "true" ]; then
              echo "✅ All validation checks passed"
              echo "validation_passed=true" >> $GITHUB_ENV
            else
              echo "⚠️  Validation passed with test warnings (compilation and security fixes successful)"
              echo "validation_passed=with_warnings" >> $GITHUB_ENV
            fi
          else
            echo "❌ Validation failed - critical requirements not met"
            if [ "$compile_success" != "true" ]; then
              echo "  - Compilation failed"
            fi
            if [ "$vulnerabilities_resolved" = "false" ]; then
              echo "  - Vulnerabilities not resolved"
            fi
            echo "validation_passed=false" >> $GITHUB_ENV
          fi
        continue-on-error: true
      
      - name: Phase 6 - Commit Changes
        if: env.validation_passed == 'true' || env.validation_passed == 'with_warnings'
        run: |
          echo "📝 Phase 6: Commit Changes"
          echo "========================="
          
          # Stage all changes
          git add .
          
          # Create comprehensive commit message using shell variables
          COMMIT_MSG="fix: automated security vulnerability fixes

Applied automated fixes for security vulnerabilities detected by cargo audit.

Summary:
- Critical vulnerabilities: ${critical_count:-0}
- High vulnerabilities: ${high_count:-0}
- Medium vulnerabilities: ${medium_count:-0}
- Compilation: ${compile_success:-unknown}
- Tests: ${tests_passed:-unknown}
- Vulnerabilities resolved: ${vulnerabilities_resolved:-unknown}
- Validation status: ${validation_passed:-unknown}

Generated by: ${GITHUB_WORKFLOW}
Base commit: ${GITHUB_SHA}
Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

          git commit -m "$COMMIT_MSG"
          
          echo "✅ Changes committed successfully"
          
      - name: Phase 7 - Result Reporting
        if: env.has_vulnerabilities == 'true'
        run: |
          echo "📊 Phase 7: Result Reporting"
          echo "============================"
          
          # Generate comprehensive fix report
          echo "## 🔒 Automated Security Fix Report" > fix-report.md
          echo "" >> fix-report.md
          echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> fix-report.md
          echo "**Workflow:** ${GITHUB_WORKFLOW}" >> fix-report.md
          echo "**Base Commit:** ${GITHUB_SHA}" >> fix-report.md
          echo "" >> fix-report.md
          
          # Vulnerability Summary
          echo "### 📊 Vulnerability Summary" >> fix-report.md
          echo "" >> fix-report.md
          echo "| Severity | Count |" >> fix-report.md
          echo "|----------|--------|" >> fix-report.md
          echo "| Critical | ${critical_count:-0} |" >> fix-report.md
          echo "| High | ${high_count:-0} |" >> fix-report.md
          echo "| Medium | ${medium_count:-0} |" >> fix-report.md
          echo "" >> fix-report.md
          
          # Fix Status
          if [ "$validation_passed" = "true" ] || [ "$validation_passed" = "with_warnings" ]; then
            echo "### ✅ Automated Fixes Successfully Applied" >> fix-report.md
            echo "" >> fix-report.md
            echo "| Phase | Status |" >> fix-report.md
            echo "|-------|--------|" >> fix-report.md
            echo "| Fix Application | ✅ Success |" >> fix-report.md
            # Create status indicators using shell logic
            if [ "$compile_success" = "true" ]; then
              COMPILE_STATUS="✅ Success"
            else
              COMPILE_STATUS="❌ Failed"
            fi
            if [ "$tests_passed" = "true" ]; then
              TESTS_STATUS="✅ Passed"
            else
              TESTS_STATUS="⚠️ Issues"
            fi
            if [ "$vulnerabilities_resolved" = "true" ]; then
              VULN_STATUS="✅ Complete"
            else
              VULN_STATUS="⚠️ Partial"
            fi
            echo "| Compilation | $COMPILE_STATUS |" >> fix-report.md
            echo "| Tests | $TESTS_STATUS |" >> fix-report.md
            echo "| Vulnerability Resolution | $VULN_STATUS |" >> fix-report.md
            echo "" >> fix-report.md
            echo "### 📋 Changes Applied" >> fix-report.md
            echo "" >> fix-report.md
            echo "```diff" >> fix-report.md
            git diff HEAD~1 >> fix-report.md 2>/dev/null || echo "No diff available" >> fix-report.md
            echo "```" >> fix-report.md
            echo "" >> fix-report.md
            echo "### ✅ Validation Results" >> fix-report.md
            echo "" >> fix-report.md
            echo "This PR has been automatically validated:" >> fix-report.md
            echo "- 🔍 **Compilation**: All targets compile successfully" >> fix-report.md
            echo "- 🧪 **Tests**: Basic test suite execution completed" >> fix-report.md
            echo "- 🔐 **Security**: Post-fix vulnerability scan completed" >> fix-report.md
            echo "" >> fix-report.md
            echo "### 🔍 Manual Review Required" >> fix-report.md
            echo "" >> fix-report.md
            echo "Please review the following before merging:" >> fix-report.md
            echo "1. Verify dependency updates are within acceptable SemVer ranges" >> fix-report.md
            echo "2. Check for any behavioral changes in updated dependencies" >> fix-report.md
            echo "3. Run full test suite: \`cargo test --all-features\`" >> fix-report.md
            echo "4. Test critical application functionality" >> fix-report.md
          elif [ "$fixes_available" = "false" ]; then
            echo "### ⚠️ Manual Intervention Required" >> fix-report.md
            echo "" >> fix-report.md
            echo "Automated fixes were not available for the detected vulnerabilities." >> fix-report.md
            echo "This likely indicates:" >> fix-report.md
            echo "- Major version upgrades required (breaking changes)" >> fix-report.md
            echo "- Complex dependency conflicts" >> fix-report.md
            echo "- Vulnerabilities requiring code changes beyond dependency updates" >> fix-report.md
            echo "" >> fix-report.md
            echo "### 🔧 Manual Fix Steps" >> fix-report.md
            echo "" >> fix-report.md
            echo "1. Review vulnerability details below" >> fix-report.md
            echo "2. Update affected dependencies manually in \`Cargo.toml\`" >> fix-report.md
            echo "3. Resolve any dependency conflicts" >> fix-report.md
            echo "4. Run \`cargo update\` to update \`Cargo.lock\`" >> fix-report.md
            echo "5. Test compilation: \`cargo check --all-targets --all-features\`" >> fix-report.md
            echo "6. Run test suite: \`cargo test --all-features\`" >> fix-report.md
            echo "7. Verify fixes: \`cargo audit\`" >> fix-report.md
          else
            echo "### ❌ Automated Fix Failed" >> fix-report.md
            echo "" >> fix-report.md
            echo "Automated fixes were available but failed during application or validation." >> fix-report.md
            echo "Check the workflow logs for detailed error information." >> fix-report.md
            echo "" >> fix-report.md
            echo "### 🔧 Troubleshooting Steps" >> fix-report.md
            echo "" >> fix-report.md
            echo "1. Review workflow logs for specific error messages" >> fix-report.md
            echo "2. Check for dependency conflicts or compilation errors" >> fix-report.md
            echo "3. Consider manual dependency updates" >> fix-report.md
            echo "4. Verify that fix prerequisites are met" >> fix-report.md
          fi
          
          echo "" >> fix-report.md
          echo "### 🔍 Detailed Vulnerability Report" >> fix-report.md
          echo "" >> fix-report.md
          echo "<details>" >> fix-report.md
          echo "<summary>Click to expand vulnerability details</summary>" >> fix-report.md
          echo "" >> fix-report.md
          echo "```json" >> fix-report.md
          cat audit-results.json >> fix-report.md 2>/dev/null || echo "No detailed vulnerability data available" >> fix-report.md
          echo "```" >> fix-report.md
          echo "</details>" >> fix-report.md
          echo "" >> fix-report.md
          echo "### 📚 Additional Resources" >> fix-report.md
          echo "" >> fix-report.md
          echo "- [RustSec Advisory Database](https://rustsec.org/advisories/)" >> fix-report.md
          echo "- [Cargo Audit Documentation](https://docs.rs/cargo-audit/)" >> fix-report.md
          echo "- [Semantic Versioning Guide](https://semver.org/)" >> fix-report.md
          
      - name: Push changes and create PR
        if: env.validation_passed == 'true' || env.validation_passed == 'with_warnings'
        run: |
          git push origin "$branch_name"
          
      - name: Create Pull Request
        if: env.validation_passed == 'true' || env.validation_passed == 'with_warnings'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.branch_name }}
          title: "🔒 Automated Security Fixes - ${{ env.critical_count }}C/${{ env.high_count }}H/${{ env.medium_count }}M"
          body-path: ./fix-report.md
          labels: |
            security
            automated
            vulnerability-fix
            validated
          assignees: dominicburkart
          draft: false
          
      - name: Create Manual Fix Issue
        if: env.has_vulnerabilities == 'true' && env.fixes_available == 'false'
        uses: peter-evans/create-issue-from-file@v5
        with:
          title: "🔧 Manual Security Fix Required - ${{ env.critical_count }}C/${{ env.high_count }}H/${{ env.medium_count }}M"
          content-filepath: ./fix-report.md
          labels: |
            security
            manual-fix-required
            vulnerability
            priority-high
          assignees: dominicburkart