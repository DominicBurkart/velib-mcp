name: Deploy to Scaleway

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  REGISTRY: rg.fr-par.scw.cloud
  NAMESPACE: ${{ secrets.SCW_REGISTRY_NAMESPACE }}
  IMAGE_NAME: velib-mcp

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: deploy
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install and configure Podman
      run: |
        # Update package lists
        sudo apt-get update
        
        # Install Podman from Ubuntu repositories (more reliable than pinning specific versions)
        sudo apt-get install -y podman
        
        # Configure Podman for rootless operation
        sudo sysctl kernel.unprivileged_userns_clone=1
        
        # Verify Podman installation
        podman --version
        podman info

    - name: Log in to Scaleway Container Registry
      run: |
        echo "${{ secrets.SCW_SECRET_KEY }}" | podman login --username nologin --password-stdin ${{ env.REGISTRY }}

    - name: Generate image tags and labels
      id: generate_tags
      run: |
        REGISTRY="${{ env.REGISTRY }}"
        NAMESPACE="${{ env.NAMESPACE }}"
        IMAGE_NAME="${{ env.IMAGE_NAME }}"
        BRANCH_NAME="${{ github.ref_name }}"
        SHA="${{ github.sha }}"
        
        # Sanitize branch name for use in container tags (replace / with -)
        SAFE_BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's/\//-/g')
        
        # Generate tags with namespace
        TAGS=""
        TAGS="${TAGS}${REGISTRY}/${NAMESPACE}/${IMAGE_NAME}:${SAFE_BRANCH_NAME},"
        TAGS="${TAGS}${REGISTRY}/${NAMESPACE}/${IMAGE_NAME}:${SHA},"
        
        # Add latest tag for main branch
        if [ "${{ github.ref_name }}" = "main" ]; then
          TAGS="${TAGS}${REGISTRY}/${NAMESPACE}/${IMAGE_NAME}:latest,"
        fi
        
        # Remove trailing comma
        TAGS=$(echo "$TAGS" | sed 's/,$//')
        
        echo "tags=$TAGS" >> $GITHUB_OUTPUT
        echo "image=${REGISTRY}/${NAMESPACE}/${IMAGE_NAME}" >> $GITHUB_OUTPUT

    - name: Build and push Podman image
      run: |
        # Build the image with all tags
        IFS=',' read -ra TAG_ARRAY <<< "${{ steps.generate_tags.outputs.tags }}"
        
        # Build with first tag
        podman build -t "${TAG_ARRAY[0]}" -f ./Dockerfile .
        
        # Tag with additional tags
        for tag in "${TAG_ARRAY[@]:1}"; do
          podman tag "${TAG_ARRAY[0]}" "$tag"
        done
        
        # Push all tags
        for tag in "${TAG_ARRAY[@]}"; do
          podman push "$tag"
        done

    - name: Deploy to Scaleway Container
      env:
        SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
        SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
        SCW_DEFAULT_ORGANIZATION_ID: ${{ secrets.SCW_DEFAULT_ORGANIZATION_ID }}
        SCW_DEFAULT_PROJECT_ID: ${{ secrets.SCW_DEFAULT_PROJECT_ID }}
        SCW_DEFAULT_REGION: fr-par
        SCW_DEFAULT_ZONE: fr-par-1
      run: |
        # Install Scaleway CLI
        curl -o /tmp/scw -L "https://github.com/scaleway/scaleway-cli/releases/latest/download/scaleway-cli_2.40.0_linux_amd64"
        chmod +x /tmp/scw
        sudo mv /tmp/scw /usr/local/bin/scw
        
        # Deploy to Scaleway Serverless Containers - Test deployment
        CONTAINER_NAME="velib-mcp"
        IMAGE_TAG="${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:main"
        
        # Check if container exists
        if scw container container list name=${CONTAINER_NAME} -o json | jq -e '.[] | select(.name=="'${CONTAINER_NAME}'")' > /dev/null; then
          echo "Updating existing container..."
          CONTAINER_ID=$(scw container container list name=${CONTAINER_NAME} -o json | jq -r '.[0].id')
          scw container container update ${CONTAINER_ID} registry-image=${IMAGE_TAG}
          scw container container deploy ${CONTAINER_ID}
        else
          echo "Creating new container..."
          scw container container create \
            name=${CONTAINER_NAME} \
            registry-image=${IMAGE_TAG} \
            port=8080 \
            min-scale=0 \
            max-scale=1 \
            memory-limit=512 \
            cpu-limit=1000
        fi